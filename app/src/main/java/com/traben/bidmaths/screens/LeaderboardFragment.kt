package com.traben.bidmaths.screens

import android.annotation.SuppressLint
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.animation.AnimationUtils
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.traben.bidmaths.LeaderBoard
import com.traben.bidmaths.LeaderboardEntry
import com.traben.bidmaths.MathGame
import com.traben.bidmaths.R
import com.traben.bidmaths.databinding.FragmentLeaderboardBinding
import com.traben.bidmaths.databinding.ItemLeaderboardEntryBinding
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

/**
 *
 * A simple recycler view based fragment to display the leaderboard
 * there isn't much complexity here but the fragment manages to maintain the colour and text
 * style and theme of the app
 *
 *  firstly this would allow a teacher access to the detailed reports of each game generated by
 *  MathGame.gameResultsDetailedInfo() when used in a classroom tablet setting
 *
 *  secondarily this would also allow a single user to keep track of their skill development over time
 *  by entering their name with a date
 *
 *  and thirdly students in a classroom setting might find a competitive drive fuelled by the leaderboard
 *  and if this is not desired by the teacher then access to the leaderboard can be blocked in the settings
 *  */
class LeaderboardFragment : Fragment() {

    private var _binding: FragmentLeaderboardBinding? = null
    private val binding get() = _binding!!

    private lateinit var adapter: LeaderboardAdapter

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentLeaderboardBinding.inflate(inflater, container, false)
        return binding.root
    }

    //load the database content outside of the main thread
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        lifecycleScope.launch(Dispatchers.IO) {
            val adapter = getRecyclerViewAdapter()
            withContext(Dispatchers.Main) {
                //apply the info back on the main thread
                applyAdapter(adapter)
            }
        }

    }

    //load the database contents into the recycler view adapter
    private fun getRecyclerViewAdapter(): LeaderboardAdapter {
        val database = LeaderBoard.getDatabase(requireContext())
        val list = database.getDao().getAllDataScoreOrdered()
        val adapter = LeaderboardAdapter(
            list.ifEmpty {
                listOf(
                    LeaderboardEntry(
                        getString(R.string.empty_leaderboard),
                        -1,
                        ""
                    )
                )
            }
        )
        database.close()
        return adapter
    }

    //applies the adapter
    private fun applyAdapter(adapter: LeaderboardAdapter) {
        this.adapter = adapter
        binding.recyclerView.layoutManager = LinearLayoutManager(context)
        binding.recyclerView.adapter = adapter
    }


    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    // the adapter for the leaderboard recyclerview
    inner class LeaderboardAdapter(private val leaderboardEntries: List<LeaderboardEntry>) :
        RecyclerView.Adapter<LeaderboardAdapter.ViewHolder>() {

        inner class ViewHolder(private val binding: ItemLeaderboardEntryBinding) :
            RecyclerView.ViewHolder(binding.root) {

            fun bind(entry: LeaderboardEntry) {
                val animation = AnimationUtils.loadAnimation(context, R.anim.pulse_wobble)
                val randomDuration = 400 + (5..15).random() * (100 - entry.score)
                animation?.duration = randomDuration.toLong()
                binding.score.startAnimation(animation)

                binding.name.text = entry.name
                if (entry.score == -1) {
                    // -1 means this is the empty leaderboard placeholder
                    // thus we can blank all these values
                    // note that the details section is given multiple newlines to fill the recycler
                    // view vertically the the darkened texture, it was just the quickest easiest way to do so
                    binding.score.text = ""
                    binding.detailsButton.text = ""
                    @SuppressLint("SetTextI18n")// string resource not reasonable here as this requires no translation
                    binding.detailsText.text =
                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
                } else {
                    binding.score.text = MathGame.scoreToGrade(entry.score)
                    binding.detailsButton.text = getString(R.string.leader_board_details)
                    binding.detailsText.text = entry.details
                    var detailBoolean = false
                    binding.detailsText.isVisible = false
                    binding.detailsButton.setOnClickListener {
                        //simple toggle for detailed view
                        detailBoolean = !detailBoolean
                        binding.detailsText.isVisible = detailBoolean
                    }
                }
            }


        }

        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
            val binding = ItemLeaderboardEntryBinding.inflate(
                LayoutInflater.from(parent.context),
                parent,
                false
            )
            return ViewHolder(binding)
        }

        override fun onBindViewHolder(holder: ViewHolder, position: Int) {
            val entry = leaderboardEntries[position]
            holder.bind(entry)
        }

        override fun getItemCount(): Int {
            return leaderboardEntries.size
        }
    }


}
